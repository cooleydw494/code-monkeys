import argparse
import os
import sys
import tempfile
from io import StringIO

from ruamel.yaml import CommentedMap

from defs import COMMANDS_CORE_PATH, MONKEY_MANIFEST_PATH, nl
from pack.modules.core.config.monkey_config.add_monkey_input_prompts import INPUT_PROMPTS
from pack.modules.core.config.monkey_config.monkey_config_validations import get_user_config_value, \
    validate_monkey_name
from pack.modules.core.config.yaml_helpers import read_yaml_file, write_yaml_file
from pack.modules.core.theme.theme_functions import print_t, input_t
from pack.modules.core.utils.monk_helpers.run_as_module import run_as_module


def process_input_prompts(data):
    return {key: get_user_config_value(key, validate_function, hint) for key, validate_function, hint in data}


def main(monk_args: argparse.Namespace):
    monkey_name = getattr(monk_args, 'monkey', None)
    if monkey_name is None or not validate_monkey_name(monkey_name):
        monkey_name = get_user_config_value("Please enter a name for your new monkey: ",
                                            validate_monkey_name, "(letters/hyphens only)")

    print_t(f"Let's configure your new {monkey_name} monkey", 'monkey')

    monkey_manifest = read_yaml_file(MONKEY_MANIFEST_PATH, ruamel=True)

    if monkey_name in monkey_manifest.keys():
        print_t(f"A monkey named {monkey_name} already exists.", 'important')
        result = input_t(f"Would you like to overwrite the existing config?", '(y/n)')
        if result.lower() != 'y':
            sys.exit(0)
        else:
            print_t("Continuing config...", 'done')

    new_monkey_data = process_input_prompts(INPUT_PROMPTS)

    comment = f"Config for {monkey_name} generated by `monk add-monkey`"
    new_monkey_commented_map = CommentedMap(new_monkey_data)
    new_monkey_commented_map.yaml_set_start_comment(comment)

    monkey_manifest[monkey_name] = new_monkey_commented_map

    yaml_string = StringIO()
    write_yaml_file(yaml_string, monkey_manifest, ruamel=True)

    yaml_string = yaml_string.getvalue().replace(monkey_name + ":", nl + monkey_name + ":")

    with tempfile.NamedTemporaryFile('w', delete=False) as temp_file:
        temp_file_name = temp_file.name
        temp_file.write(yaml_string)

    try:
        os.replace(temp_file_name, MONKEY_MANIFEST_PATH)
    except Exception as e:
        print_t("An error occurred while updating the monkey-manifest file: " + str(e), 'error')
        return

    print_t("Config complete. The 'monkey-manifest.yaml' file has been updated.", 'done')
    run_generate = input_t("Run `monk generate-monkeys` to complete the config process?", '(y/n)')
    if run_generate.lower() == 'y':
        run_as_module(os.path.join(COMMANDS_CORE_PATH, '../../../modules/core/utils/monk_helpers/generate_monkeys.py'), 'main', [])
