#!/usr/bin/env python
import os
import subprocess
import sys

from pack.modules.internal.config_mgmt.environment_checks import monk_env_checks
from pack.modules.internal.theme.theme_functions import print_t
from pack.modules.internal.utils.find_entity import find_entity
from pack.modules.internal.utils.monk_helpers import handle_alternate_actions, handle_special_commands, \
    parse_monk_args, run_command_as_module

# Some basic environment checks
monk_env_checks()

# Setup and Parse Monk Arguments
args, unknown_args, action, entity, entity_type = parse_monk_args()

# Special Commands that override typical behavior (reasoning in definition)
if handle_special_commands(args, action, entity, entity_type):
    sys.exit(0)

# Find Entity (includes interactive selection)
entity_path = find_entity(entity, entity_type)

# Handle Alternate Actions (edit, print, copy_path, help, etc)
if handle_alternate_actions(action, entity_path):
    sys.exit(0)

# Get the extension of the script
extension = os.path.splitext(entity_path.strip())[1]

# Run the script with the provided arguments
if extension == ".sh":
    subprocess.call(['bash', entity_path.strip()] + sys.argv[2:])
elif extension == ".bat":
    subprocess.call([entity_path.strip()] + sys.argv[2:])
elif extension == ".py":
    try:
        # args = vars(args)
        run_command_as_module(entity_path.strip(), 'main', args)
    except KeyboardInterrupt:
        print()
        print_t("Exiting due to KeyboardInterrupt from user.", 'quiet')
        sys.exit(1)
else:
    print_t(f"Entity Type not supported: {extension}. find_entity.py should have filtered this out.", 'error')
    sys.exit(1)
