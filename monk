#!/usr/bin/env python
import os
import sys
import subprocess

from definitions import COMMANDS_PATH, MODULES_PATH, AUTOMATIONS_PATH, BARRELS_PATH, ROOT_PATH, PYTHON_COMMAND
from __init__ import __version__
from pack.modules.custom.style.visuals import printc, inputc
from pack.modules.internal.utils.monk_helpers import handle_alternate_actions, handle_special_commands, parse_monk_args, \
    run_command_as_module
from pack.modules.internal.find_script import find_entity
from pack.modules.internal.utils.environment_checks import environment_checks

# Some basic environment checks
environment_checks()

# Setup and Parse Monk Arguments
args, action, entity, entity_type, entity_type_path =\
    parse_monk_args(COMMANDS_PATH, AUTOMATIONS_PATH, BARRELS_PATH, MODULES_PATH)

# print key/values for debugging
print(f"action: {action}")
print(f"entity: {entity}")
print(f"entity_type: {entity_type}")
print(f"entity_type_path: {entity_type_path}")

# Warning For "run" action on non-commands
if action == 'run' and entity_type != 'command':
    printc(f"You are attempting to use the default 'run' action on entity type: {entity_type}. This is allowed, and "
           f"monk will attempt to run {entity}, but implementation of this hasn't been fully thought through. "
           f"You may want to exercise caution.", 'warning')
    inputc("Press Enter to continue or Ctrl+C to cancel...")

# Special Commands that override typical behavior (reasoning in definition)
if handle_special_commands(args, action, entity, entity_type, ROOT_PATH, PYTHON_COMMAND, __version__):
    sys.exit(0)

# Find Entity (includes interactive selection)
entity_path = find_entity(entity, entity_type_path)

# Handle Alternate Actions (edit, print, copy_path, help, etc)
if handle_alternate_actions(action, entity_path):
    sys.exit(0)

# Get the extension of the script
extension = os.path.splitext(entity_path.strip())[1]

# Run the script with the provided arguments
if extension == ".sh":
    subprocess.call(['bash', entity_path.strip()] + sys.argv[2:])
elif extension == ".bat":
    subprocess.call([entity_path.strip()] + sys.argv[2:])
elif extension == ".py":
    run_command_as_module(entity_path.strip(), 'main', sys.argv[2:])
    # subprocess.call([sys.executable, entity_path.strip()] + sys.argv[2:])
else:
    printc(f"Entity Type not supported: {extension}. find_entity.py should have already filtered this out.", 'error')
    sys.exit(1)
