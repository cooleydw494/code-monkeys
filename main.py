import json
import os
import subprocess
import sys

import openai
from scripts.get_monkey_name import get_monkey_name
from scripts.main_scripts.instantiate_gpt_models import instantiate_gpt_models
from scripts.main_scripts.process_file import process_file
from scripts.main_scripts.summarize_special_file import summarize_special_file
from termcolor import colored

# Check if the monkey name argument is provided
if len(sys.argv) < 2:
    print(colored("⚠️ Please provide the name of the monkey as a command-line argument.", "yellow"))
    exit(1)

print(
    colored("🚀 Welcome to the Monkeyspace! Let's wreak the opposite of havoc on your [whatever] with Monkey Power! 🌟",
            "green"))

# Define variables from environment
openai.api_key = os.getenv("OPENAI_API_KEY")
work_path = os.getenv("WORK_PATH")

monkey_name, monkey_config_file = get_monkey_name(sys.argv)
script_path = "scripts/load-monkey-config.py"
process = subprocess.run(["python", script_path, monkey_config_file], check=True, stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)

if process.returncode != 0:
    print(colored(process.stderr.decode(), 'red'))
    sys.exit(1)

loaded_config = json.loads(process.stdout.decode())

# mconfig is a dictionary containing the monkey's configuration variables, listed below:
# MAIN_PROMPT, USAGE_PROMPT, SUMMARY_PROMPT, SPECIAL_FILE, SUMMARY_MODEL, MAIN_MODEL, USAGE_MODEL
# OVERRIDE_WORK_PATH, OVERRIDE_PROCESS_FILE_FN, OVERRIDE_OUTPUT_PATH, OVERRIDE_OUTPUT_EXT, OUTPUT_FILENAME_APPEND
mconfig = {key: value for key, value in loaded_config.items()}

# Instantiate necessary GPT models
gpt_models = instantiate_gpt_models(mconfig['MAIN_MODEL'], mconfig['SUMMARY_MODEL'], mconfig['USAGE_MODEL'])


def gpt_client(model_name):
    return gpt_models.get(model_name)


# Check if the special file exists
if not os.path.isfile(mconfig['SPECIAL_FILE']):
    print(colored(f"⚠️ Special file '{mconfig['SPECIAL_FILE']}' not found.", "yellow"))
    exit(1)

# Summarize the special file
special_file_summary = summarize_special_file(mconfig['SPECIAL_FILE'], mconfig['SUMMARY_MODEL'],
                                              mconfig['SUMMARY_PROMPT'], gpt_client)

print(colored("📋 Special file summarized successfully! 📝", 'green'))
print(colored(f"📝 Summary: {special_file_summary}\n", 'cyan'))

# Iterate over each file in the work_path
for root, dirs, files in os.walk(work_path):
    for file in files:
        file_path = os.path.join(root, file)
        # TODO: Make it possible to use an alternate process_file function in the monkey-manifest.yaml config.
        process_file(file_path, mconfig['USAGE_PROMPT'], special_file_summary, mconfig['USAGE_MODEL'],
                     mconfig['MAIN_PROMPT'], mconfig['MAIN_MODEL'], gpt_client)
        # TODO: Add optional git add/commit/push functionality, specified by monkey-manifest.yaml config / monkey configs
        # This should be imported via a script in scripts/internal/git-ops.py and should also be overridable via the monkey-manifest.yaml config
        # The commit message should be generated by the monkey, and should be a summary of the changes made to the file
