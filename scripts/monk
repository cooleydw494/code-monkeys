#!/usr/bin/env python
import os
import subprocess
import sys
import traceback

from codemonkeys.utils.env.update_env_class import update_env_class
from codemonkeys.utils.monkey_config.update_monkey_config_class import update_monkey_config_class
from codemonkeys.utils.monk.generate_monkeys import generate_monkeys
from defs import nl
from codemonkeys.utils.env.environment_checks import monk_env_checks
from codemonkeys.utils.find_entity import find_entity
from codemonkeys.utils.monk.parse_monk_args import parse_monk_args
from codemonkeys.utils.monk.run_entities import run_automation, run_command
from codemonkeys.utils.monk.theme_functions import print_t

# Some basic environment checks
monk_env_checks()

# Regenerate "magic" config/env stuff
update_env_class()
update_monkey_config_class()

# Generate monkey config temp files from monkey-manifest.yaml
generate_monkeys()

# Setup and Parse Monk Arguments
monk_args, named_args, unnamed_args, action, entity_name, entity_type = parse_monk_args()

# Find Entity (includes interactive selection)
entity_path = find_entity(entity_name, entity_type)

if action == 'edit':
    subprocess.run(['vim', entity_path.strip()])

elif action == 'help':
    print('help placeholder')

elif action == 'run':
    try:
        if entity_type == 'command':
            print('command')
            extension = os.path.splitext(entity_path.strip())[1]
            if extension == ".py":
                run_command(entity_path.strip(), entity_name, monk_args, named_args, unnamed_args)
            elif extension == ".sh":
                subprocess.call(['bash', entity_path.strip()] + sys.argv[2:])
            elif extension == ".bat":
                subprocess.call([entity_path.strip()] + sys.argv[2:])
            else:
                print_t(f"Unsupported entity_type: {extension}. find_entity should have filtered this.", 'error')
                sys.exit(1)
        elif entity_type == 'automation':
            print('automation')
            run_automation(entity_path.strip(), monk_args=monk_args)
        elif entity_type == 'barrel':
            print('barrel')
        else:
            print_t(f'unsupported entity_type: {entity_type}', 'error')
            sys.exit(1)
    except KeyboardInterrupt:
        print_t(f"{nl}Exiting due to KeyboardInterrupt from user.", 'quiet')
        sys.exit(1)
    except Exception as e:
        print_t(f"{nl}Error: {e}", 'error')
        print_t(f"{nl}Error Trace:{nl}{nl.join(traceback.format_exc().splitlines())}")
        sys.exit(1)
else:
    print_t(f'unsupported action: {action}', 'error')
    sys.exit(1)
